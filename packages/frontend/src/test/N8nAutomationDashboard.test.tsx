import React from "react"; import { vi } from "vitest"; import { render, screen, fireEvent } from "../test/setup"; import N8nAutomationDashboard from "../components/N8nAutomationDashboard"; import { useN8nAutomation } from "../hooks/useN8nAutomation"; vi.mock("../hooks/useN8nAutomation"); const mockUseN8nAutomation = useN8nAutomation as any; describe("N8nAutomationDashboard", () => { const defaultMockData = { integration: { webhookUrl: "https://test.com/webhook", isActive: true, webhookCount: 42, lastWebhookAt: "2024-01-01T10:00:00Z" }, metrics: { activeWorkflows: 5, totalWorkflows: 10, successRate: 85.5, successfulWorkflows: 8, totalTimeSaved: 3600000 }, workflows: [{ id: "workflow-1", name: "Test Workflow 1", status: "running", lastRunAt: "2024-01-01T10:00:00Z", duration: 300000, timeSaved: 1800000, successRate: 90, metadata: { category: "marketing", priority: "high" } }], alerts: [{ id: "alert-1", message: "Workflow performance degraded", severity: "warning", isResolved: false, workflowName: "Test Workflow 1", alertType: "success_rate_drop", currentValue: 75.0, threshold: 80.0, triggeredAt: "2024-01-01T10:00:00Z" }], roi: [{ id: "roi-1", workflowName: "Test Workflow 1", roi: 150, costSavings: 5000, timeSavings: 3600000 }], isLoading: false, hasError: false, refreshAll: vi.fn(), exportMutation: { mutate: vi.fn(), isPending: false }, getFilteredWorkflows: vi.fn().mockReturnValue([{ id: "workflow-1", name: "Test Workflow 1", status: "running", lastRunAt: "2024-01-01T10:00:00Z", duration: 300000, timeSaved: 1800000, successRate: 90, metadata: { category: "marketing", priority: "high" } }]) }; beforeEach(() => { vi.clearAllMocks(); mockUseN8nAutomation.mockReturnValue(defaultMockData); }); it("renders the dashboard header correctly", () => { render(<N8nAutomationDashboard />); expect(screen.getByText("n8n Automation Dashboard")).toBeInTheDocument(); expect(screen.getByText("Monitor workflow performance, track ROI, and manage automation health")).toBeInTheDocument(); }); it("renders summary metrics correctly", () => { render(<N8nAutomationDashboard />); expect(screen.getByText("Active Workflows")).toBeInTheDocument(); expect(screen.getByText("5")).toBeInTheDocument(); expect(screen.getByText("of 10 total")).toBeInTheDocument(); expect(screen.getByText("85.5%")).toBeInTheDocument(); expect(screen.getByText("8 successful")).toBeInTheDocument(); }); it("handles refresh button click", () => { render(<N8nAutomationDashboard />); const refreshButtons = screen.getAllByText("Refresh"); const mainRefreshButton = refreshButtons[0]; fireEvent.click(mainRefreshButton); expect(defaultMockData.refreshAll).toHaveBeenCalled(); }); it("handles export button click", () => { render(<N8nAutomationDashboard />); const exportButton = screen.getByText("Export Data"); fireEvent.click(exportButton); expect(defaultMockData.exportMutation.mutate).toHaveBeenCalled(); }); it("displays error state correctly", () => { mockUseN8nAutomation.mockReturnValue({ ...defaultMockData, hasError: true }); render(<N8nAutomationDashboard />); expect(screen.getByText("Error Loading Dashboard")).toBeInTheDocument(); expect(screen.getByText("Retry")).toBeInTheDocument(); }); it("handles retry button click in error state", () => { mockUseN8nAutomation.mockReturnValue({ ...defaultMockData, hasError: true }); render(<N8nAutomationDashboard />); const retryButton = screen.getByText("Retry"); fireEvent.click(retryButton); expect(defaultMockData.refreshAll).toHaveBeenCalled(); }); });
